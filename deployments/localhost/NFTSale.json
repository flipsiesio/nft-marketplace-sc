{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newNFTOnSale",
          "type": "address"
        }
      ],
      "name": "setWorkingNFT",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "maxExpirationDuration",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getSellOrdersAmount",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_at",
          "type": "uint256"
        }
      ],
      "name": "getSellOrderStatus",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_at",
          "type": "uint256"
        }
      ],
      "name": "getSellOrderPrice",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "nftOnSale",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_at",
          "type": "uint256"
        },
        {
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "setPriceFor",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_at",
          "type": "uint256"
        }
      ],
      "name": "getSellOrderFeesPaid",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_at",
          "type": "uint256"
        }
      ],
      "name": "getSellOrderExpirationTime",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "minExpirationDuration",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feeInBps",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_at",
          "type": "uint256"
        },
        {
          "name": "_expirationTime",
          "type": "uint256"
        }
      ],
      "name": "setExpirationTimeFor",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_at",
          "type": "uint256"
        }
      ],
      "name": "getBackFromSale",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feeReceiver",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "MAX_FEE",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_at",
          "type": "uint256"
        }
      ],
      "name": "getSellOrderSeller",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_at",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_maxExpirationDuration",
          "type": "uint256"
        }
      ],
      "name": "setMaxExpirationDuration",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_at",
          "type": "uint256"
        }
      ],
      "name": "getSellOrderTokenId",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_minExpirationDuration",
          "type": "uint256"
        }
      ],
      "name": "setMinExpirationDuration",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_feeReceiver",
          "type": "address"
        }
      ],
      "name": "setFeeReceiver",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_nftToSell",
          "type": "uint256"
        },
        {
          "name": "_price",
          "type": "uint256"
        },
        {
          "name": "_expirationDuration",
          "type": "uint256"
        }
      ],
      "name": "acceptTokenToSell",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "_nftOnSale",
          "type": "address"
        },
        {
          "name": "_feeReceiver",
          "type": "address"
        },
        {
          "name": "_minExpirationDuration",
          "type": "uint256"
        },
        {
          "name": "_maxExpirationDuration",
          "type": "uint256"
        },
        {
          "name": "_feeInBps",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "orderIndex",
          "type": "uint256"
        }
      ],
      "name": "OrderCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "orderIndex",
          "type": "uint256"
        }
      ],
      "name": "OrderFilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "orderIndex",
          "type": "uint256"
        }
      ],
      "name": "OrderRejected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    }
  ],
  "transactionHash": "0x67fbda749f56dd9ac19c451039e4e1bd131c317010177555e4de59e52cddfbd9",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "2216462",
    "logsBloom": "0x
    "blockHash": "0xdb343c8238aafa7e54df3ebd11c946001dec36c981a1e8ebffd79a7576c641b0",
    "transactionHash": "0x67fbda749f56dd9ac19c451039e4e1bd131c317010177555e4de59e52cddfbd9",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0x67fbda749f56dd9ac19c451039e4e1bd131c317010177555e4de59e52cddfbd9",
        "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xdb343c8238aafa7e54df3ebd11c946001dec36c981a1e8ebffd79a7576c641b0"
      }
    ],
    "blockNumber": 2,
    "cumulativeGasUsed": "2216462",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "86400",
    "864000",
    9500
  ],
  "solcInputHash": "1adc2bcb2137669ef8e15316ec2c9e23",
  "metadata": "{\"compiler\":{\"version\":\"0.4.26+commit.4563c3fc\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"_newNFTOnSale\",\"type\":\"address\"}],\"name\":\"setWorkingNFT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxExpirationDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSellOrdersAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_at\",\"type\":\"uint256\"}],\"name\":\"getSellOrderStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_at\",\"type\":\"uint256\"}],\"name\":\"getSellOrderPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nftOnSale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_at\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPriceFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_at\",\"type\":\"uint256\"}],\"name\":\"getSellOrderFeesPaid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_at\",\"type\":\"uint256\"}],\"name\":\"getSellOrderExpirationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minExpirationDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeInBps\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_at\",\"type\":\"uint256\"},{\"name\":\"_expirationTime\",\"type\":\"uint256\"}],\"name\":\"setExpirationTimeFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_at\",\"type\":\"uint256\"}],\"name\":\"getBackFromSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_at\",\"type\":\"uint256\"}],\"name\":\"getSellOrderSeller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_at\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxExpirationDuration\",\"type\":\"uint256\"}],\"name\":\"setMaxExpirationDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_at\",\"type\":\"uint256\"}],\"name\":\"getSellOrderTokenId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minExpirationDuration\",\"type\":\"uint256\"}],\"name\":\"setMinExpirationDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceiver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nftToSell\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_expirationDuration\",\"type\":\"uint256\"}],\"name\":\"acceptTokenToSell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_nftOnSale\",\"type\":\"address\"},{\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"name\":\"_minExpirationDuration\",\"type\":\"uint256\"},{\"name\":\"_maxExpirationDuration\",\"type\":\"uint256\"},{\"name\":\"_feeInBps\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orderIndex\",\"type\":\"uint256\"}],\"name\":\"OrderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orderIndex\",\"type\":\"uint256\"}],\"name\":\"OrderFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orderIndex\",\"type\":\"uint256\"}],\"name\":\"OrderRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}],\"devdoc\":{\"author\":\"Integral Team\",\"methods\":{\"acceptTokenToSell(uint256,uint256,uint256)\":{\"params\":{\"_expirationDuration\":\"The duration of the sell order, and when it passed the sell order could not be filled without restarting of the sell order.\",\"_nftToSell\":\"The token ID to sell through sell order\",\"_price\":\"The price of the sell order\"}},\"buy(uint256)\":{\"params\":{\"_at\":\"The seller order index\"}},\"getBackFromSale(uint256)\":{\"params\":{\"_at\":\"The index of the sell order\"}},\"getSellOrderExpirationTime(uint256)\":{\"params\":{\"_at\":\"The index of the sell order\"},\"return\":\"Expiration timestamp in future\"},\"getSellOrderFeesPaid(uint256)\":{\"params\":{\"_at\":\"The index of the sell order\"},\"return\":\"Amount fees to pay\"},\"getSellOrderPrice(uint256)\":{\"params\":{\"_at\":\"The index of the sell order\"},\"return\":\"Price in ETH\"},\"getSellOrderSeller(uint256)\":{\"params\":{\"_at\":\"The index of the sell order\"},\"return\":\"The seller address of the sell order\"},\"getSellOrderStatus(uint256)\":{\"params\":{\"_at\":\"The index of the auction\"},\"return\":\"Status enumeration member as uint256\"},\"getSellOrderTokenId(uint256)\":{\"params\":{\"_at\":\"The index of the sell order\"},\"return\":\"The ID of the selling token\"},\"getSellOrdersAmount()\":{\"return\":\"Amount of the sell orders\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setExpirationTimeFor(uint256,uint256)\":{\"params\":{\"_at\":\"The seller order index\",\"_expirationTime\":\"The new expiration time for the sell order\"}},\"setFee(uint256)\":{\"params\":{\"_fee\":\"The new amount of fee in BPS\"}},\"setFeeReceiver(address)\":{\"params\":{\"_feeReceiver\":\"The new fee receiver address\"}},\"setMaxExpirationDuration(uint256)\":{\"params\":{\"_maxExpirationDuration\":\"The new maximum expiration duration in seconds\"}},\"setMinExpirationDuration(uint256)\":{\"params\":{\"_minExpirationDuration\":\"The new minimum expiration duration in seconds\"}},\"setPriceFor(uint256,uint256)\":{\"params\":{\"_at\":\"The seller order index\",\"_price\":\"The new price for the sell order\"}},\"setWorkingNFT(address)\":{\"params\":{\"_newNFTOnSale\":\"The new NFT token address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"A contract of the marketplace.\"},\"userdoc\":{\"methods\":{\"acceptTokenToSell(uint256,uint256,uint256)\":{\"notice\":\"The function cancel the sell order and return the token in the sell order to the seller.\"},\"buy(uint256)\":{\"notice\":\"The function allows anyone to fill sell order.\"},\"getBackFromSale(uint256)\":{\"notice\":\"The function cancel the sell order and return the token in the sell order to the seller.\"},\"getSellOrderExpirationTime(uint256)\":{\"notice\":\"The standard getter to return an expiration time of the given sell order\"},\"getSellOrderFeesPaid(uint256)\":{\"notice\":\"The standard getter to return a fees to pay amount of the given sell order\"},\"getSellOrderPrice(uint256)\":{\"notice\":\"The standard getter to return a price in ETH of the given sell order\"},\"getSellOrderSeller(uint256)\":{\"notice\":\"The standard getter to return a seller address of the given sell order\"},\"getSellOrderStatus(uint256)\":{\"notice\":\"The standard getter to return a status of the given sell order\"},\"getSellOrderTokenId(uint256)\":{\"notice\":\"The standard getter to return a token ID of the given sell order\"},\"getSellOrdersAmount()\":{\"notice\":\"The standard getter to return an amount of the sell orders\"},\"setExpirationTimeFor(uint256,uint256)\":{\"notice\":\"The function allows seller continue selling by expanding the expiration time of the sell order.\"},\"setFee(uint256)\":{\"notice\":\"A standard setter for the fee BPS amount which available only for user\"},\"setFeeReceiver(address)\":{\"notice\":\"A standard setter for the fee receiver address which available only for user\"},\"setMaxExpirationDuration(uint256)\":{\"notice\":\"A standard setter for the maximum expiration duration which available only for user\"},\"setMinExpirationDuration(uint256)\":{\"notice\":\"A standard setter for the minimum expiration duration which available only for user\"},\"setPriceFor(uint256,uint256)\":{\"notice\":\"The function allows seller to change price.\"},\"setWorkingNFT(address)\":{\"notice\":\"A standard setter for the working NFT which available only for user\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/NFTSale.sol\":\"NFTSale\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Management.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.4.0;\\n\\nimport './Ownable.sol';\\nimport './ReentrancyGuard.sol';\\nimport './interfaces/IERC721.sol';\\n\\n/// @title A contract for holding management functions and modifiers.\\n/// @author Integral Team\\ncontract Management is Ownable, ReentrancyGuard {\\n\\n    // This enumeration is describing different statuses of the different orders\\n    enum Status {\\n        PENDING,\\n        FILLED,\\n        REJECTED,\\n        EXPIRED\\n    }\\n\\n    /// @notice This is max of the basis points\\n    uint256 public constant MAX_FEE = 10000;\\n\\n    /// @notice This is a fee amount in basis points using in sell orders and auctions\\n    uint256 public feeInBps;\\n\\n    /// @notice This is the address which will receive any kind of fees (either in marketplace or auction)\\n    address public feeReceiver;\\n\\n    /// @notice This is the lower border of the expiration duration that used in orders of marketplace and in auctions\\n    uint256 public minExpirationDuration;\\n\\n    /// @notice This is the upper border of the expiration duration that used in orders of marketplace and in auctions\\n    uint256 public maxExpirationDuration;\\n\\n    /// @notice This is the amount of either sell orders or auctions\\n    uint256 internal _length;\\n\\n    /// @notice This is a NFT which could be sold in marketplace or auction\\n    IERC721 public nftOnSale;\\n\\n    /// @notice This is a standard constructor with one argument\\n    /// @param _nftOnSale The NFT which could be sold in marketplace or auction\\n    constructor(\\n        address _nftOnSale,\\n        address _feeReceiver,\\n        uint256 _minExpirationDuration,\\n        uint256 _maxExpirationDuration,\\n        uint256 _feeInBps\\n    ) public {\\n        nftOnSale = IERC721(_nftOnSale);\\n        feeReceiver = _feeReceiver;\\n        minExpirationDuration = _minExpirationDuration;\\n        maxExpirationDuration = _maxExpirationDuration;\\n        feeInBps = _feeInBps;\\n    }\\n\\n    /// @notice This custom modifier is to validate index of either sell order or auction\\n    /// @param _at An index in the mapping of auctions or sell orders\\n    modifier validIndex(uint256 _at) {\\n        require(_at < _length, \\\"invalidIndex\\\");\\n        _;\\n    }\\n\\n    /// @notice This custom modifier is to validate expiration duration of either sell order or auction\\n    /// @param _expirationDuration The duration which about to be used in auction or sell order\\n    modifier validExpirationDuration(uint256 _expirationDuration) {\\n        require(_expirationDuration >= minExpirationDuration && _expirationDuration <= maxExpirationDuration, \\\"invalidExpirationDuration\\\");\\n        _;\\n    }\\n\\n    /// @notice A standard setter for the working NFT which available only for user\\n    /// @param _newNFTOnSale The new NFT token address\\n    function setWorkingNFT(address _newNFTOnSale) external onlyOwner {\\n        nftOnSale = IERC721(_newNFTOnSale);\\n    }\\n\\n    /// @notice A standard setter for the fee receiver address which available only for user\\n    /// @param _feeReceiver The new fee receiver address\\n    function setFeeReceiver(address _feeReceiver) external onlyOwner {\\n        feeReceiver = _feeReceiver;\\n    }\\n\\n    /// @notice A standard setter for the fee BPS amount which available only for user\\n    /// @param _fee The new amount of fee in BPS\\n    function setFee(uint256 _fee) external onlyOwner {\\n        feeInBps = _fee;\\n    }\\n\\n    /// @notice A standard setter for the minimum expiration duration which available only for user\\n    /// @param _minExpirationDuration The new minimum expiration duration in seconds\\n    function setMinExpirationDuration(uint256 _minExpirationDuration) external onlyOwner {\\n        minExpirationDuration = _minExpirationDuration;\\n    }\\n\\n    /// @notice A standard setter for the maximum expiration duration which available only for user\\n    /// @param _maxExpirationDuration The new maximum expiration duration in seconds\\n    function setMaxExpirationDuration(uint256 _maxExpirationDuration) external onlyOwner {\\n        maxExpirationDuration = _maxExpirationDuration;\\n    }\\n\\n    /// @notice Default fallback function which allows the contract to accept ether\\n    function() external payable {}\\n}\\n\",\"keccak256\":\"0xd3be8e8fbf3b928df330257e54411213526985dfd603b2a85e05d8d7b2c4e261\"},\"contracts/NFTSale.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.4.0;\\n\\nimport './interfaces/IERC721.sol';\\nimport './Management.sol';\\nimport './SafeMath.sol';\\n\\n/// @title A contract of the marketplace.\\n/// @author Integral Team\\ncontract NFTSale is Management {\\n    using SafeMath for uint256;\\n\\n\\n    /// @notice This event is fired when seller create the sell order\\n    event OrderCreated(uint256 indexed orderIndex);\\n\\n    /// @notice This event is fired when seller fill the sell order\\n    event OrderFilled(uint256 indexed orderIndex);\\n\\n    /// @notice This event is fired when seller reject the sell order\\n    event OrderRejected(uint256 indexed orderIndex);\\n\\n    // This struct is describing the sell order information\\n    struct SellOrder {\\n        uint256 tokenId; // ID of the selling token\\n        address seller; // seller address\\n        uint256 price; // price of the selling token in ETH\\n        Status status; // status of the sell order\\n        uint256 expirationTime; // time when the sell order expires\\n        uint256 paidFees; // amount of fees to pay\\n    }\\n\\n    /// @notice the storage for the sell orders\\n    mapping(uint256 => SellOrder) internal _sellOrders;\\n\\n    /// @notice This custom modifier is to validate if msg.sender is the seller of the sell orders\\n    /// @param _at The index of the given sell roder in which seller is checked\\n    modifier onlySellerOf(uint256 _at) {\\n        require(_sellOrders[_at].seller == msg.sender, \\\"onlySeller\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _nftOnSale,\\n        address _feeReceiver,\\n        uint256 _minExpirationDuration,\\n        uint256 _maxExpirationDuration,\\n        uint256 _feeInBps\\n    )\\n        public\\n        Management(\\n          _nftOnSale,\\n          _feeReceiver,\\n          _minExpirationDuration,\\n          _maxExpirationDuration,\\n          _feeInBps\\n        )\\n    {}\\n\\n    /// @notice The standard getter to return an amount of the sell orders\\n    /// @return Amount of the sell orders\\n    function getSellOrdersAmount() external view returns(uint256) {\\n        return _length;\\n    }\\n\\n    /// @notice The standard getter to return a token ID of the given sell order\\n    /// @param _at The index of the sell order\\n    /// @return The ID of the selling token\\n    function getSellOrderTokenId(uint256 _at) external view validIndex(_at) returns(uint256) {\\n        return _sellOrders[_at].tokenId;\\n    }\\n\\n    /// @notice The standard getter to return a seller address of the given sell order\\n    /// @param _at The index of the sell order\\n    /// @return The seller address of the sell order\\n    function getSellOrderSeller(uint256 _at) external view validIndex(_at) returns(address) {\\n        return _sellOrders[_at].seller;\\n    }\\n\\n    /// @notice The standard getter to return a price in ETH of the given sell order\\n    /// @param _at The index of the sell order\\n    /// @return Price in ETH\\n    function getSellOrderPrice(uint256 _at) external view validIndex(_at) returns(uint256) {\\n        return _sellOrders[_at].price;\\n    }\\n\\n    /// @notice The standard getter to return a fees to pay amount of the given sell order\\n    /// @param _at The index of the sell order\\n    /// @return Amount fees to pay\\n    function getSellOrderFeesPaid(uint256 _at) external view validIndex(_at) returns(uint256) {\\n        return _sellOrders[_at].paidFees;\\n    }\\n\\n    /// @notice The standard getter to return an expiration time of the given sell order\\n    /// @param _at The index of the sell order\\n    /// @return Expiration timestamp in future\\n    function getSellOrderExpirationTime(uint256 _at) external view validIndex(_at) returns(uint256) {\\n        return _sellOrders[_at].expirationTime;\\n    }\\n\\n    /// @notice The standard getter to return a status of the given sell order\\n    /// @param _at The index of the auction\\n    /// @return Status enumeration member as uint256\\n    function getSellOrderStatus(uint256 _at) external view validIndex(_at) returns(uint256) {\\n        return uint256(_sellOrders[_at].status);\\n    }\\n\\n    /// @notice The function cancel the sell order and return the token in the sell order to the seller.\\n    /// @param _at The index of the sell order\\n    function getBackFromSale(uint256 _at) external onlySellerOf(_at) {\\n        require(_sellOrders[_at].status == Status.PENDING, \\\"onlyWhenPending\\\");\\n        nftOnSale.safeTransferFrom(address(this), msg.sender, _sellOrders[_at].tokenId);\\n        if (block.timestamp <= _sellOrders[_at].expirationTime) {\\n            _sellOrders[_at].status = Status.REJECTED;\\n        } else {\\n            _sellOrders[_at].status = Status.EXPIRED;\\n        }\\n        emit OrderRejected(_at);\\n    }\\n\\n    /// @notice The function cancel the sell order and return the token in the sell order to the seller.\\n    /// @param _nftToSell The token ID to sell through sell order\\n    /// @param _price The price of the sell order\\n    /// @param _expirationDuration The duration of the sell order, and when it passed the sell order could not be filled without restarting of the sell order.\\n    function acceptTokenToSell(uint256 _nftToSell, uint256 _price, uint256 _expirationDuration)\\n        external\\n        validExpirationDuration(_expirationDuration)\\n    {\\n        nftOnSale.safeTransferFrom(msg.sender, address(this), _nftToSell);\\n        _sellOrders[_length] = SellOrder({\\n            tokenId: _nftToSell,\\n            seller: msg.sender,\\n            price: _price,\\n            status: Status.PENDING,\\n            expirationTime: block.timestamp.add(_expirationDuration),\\n            paidFees: 0\\n        });\\n        emit OrderCreated(_length);\\n        _length = _length.add(1);\\n    }\\n\\n    /// @notice The function allows seller to change price.\\n    /// @param _at The seller order index\\n    /// @param _price The new price for the sell order\\n    function setPriceFor(uint256 _at, uint256 _price) external\\n        validIndex(_at)\\n        onlySellerOf(_at)\\n    {\\n        _sellOrders[_at].price = _price;\\n    }\\n\\n    /// @notice The function allows seller continue selling by expanding the expiration time of the sell order.\\n    /// @param _at The seller order index\\n    /// @param _expirationTime The new expiration time for the sell order\\n    function setExpirationTimeFor(uint256 _at, uint256 _expirationTime) external\\n        validIndex(_at)\\n        onlySellerOf(_at)\\n    {\\n        require(_sellOrders[_at].expirationTime <= _expirationTime, \\\"onlyFutureTimeAllowed\\\");\\n        _sellOrders[_at].expirationTime = _expirationTime;\\n    }\\n\\n    /// @notice The function allows anyone to fill sell order.\\n    /// @param _at The seller order index\\n    function buy(uint256 _at) external payable nonReentrant validIndex(_at) {\\n        uint256 price = _sellOrders[_at].price;\\n        uint256 feeAmount = price.mul(feeInBps).div(MAX_FEE);\\n        require(msg.value >= price.add(feeAmount), \\\"notEnoughFunds\\\");\\n        require(_sellOrders[_at].status == Status.PENDING, \\\"orderIsFilledOrRejected\\\");\\n        require(block.timestamp <= _sellOrders[_at].expirationTime, \\\"orderIsExpired\\\");\\n\\n        nftOnSale.safeTransferFrom(address(this), msg.sender, _sellOrders[_at].tokenId);\\n        _sellOrders[_at].seller.transfer(_sellOrders[_at].price);\\n        feeReceiver.transfer(feeAmount);\\n        _sellOrders[_at].paidFees = feeAmount;\\n        _sellOrders[_at].status = Status.FILLED;\\n        emit OrderFilled(_at);\\n    }\\n}\\n\",\"keccak256\":\"0x8f74a0e585328bd52087e22b389b39a6c2097e4c23e90055667f5cace6928c71\"},\"contracts/Ownable.sol\":{\"content\":\"pragma solidity ^0.4.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() public {\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x883d0826b958473f0f543f1a764343596746d04626bae9988fea5566c5177907\"},\"contracts/ReentrancyGuard.sol\":{\"content\":\"pragma solidity ^0.4.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() public {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0a96afec6b3d6c667cf2794719cbf1cd4edfa28ba367777920bd771eeed909e5\"},\"contracts/SafeMath.sol\":{\"content\":\"pragma solidity ^0.4.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe16d01c65ce05da9b2a2bce3cd1367279b16da665f7851d4a389c1b81620e00c\"},\"contracts/interfaces/IERC721.sol\":{\"content\":\"pragma solidity ^0.4.0;\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ncontract IERC721 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xb603565feb0b8cd5d656ad1be1b2454bcc466479af84ff13bfeee81d52c8a9e5\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405160a0806126648339810180604052810190808051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190505050848484848461007833610125640100000000026401000000009004565b6001808190555084600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550826004819055508160058190555080600281905550505050505050505050506101e9565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61246c806101f86000396000f300608060405260043610610154576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630fea6f7f146101565780635059702114610199578063523c096f146101c457806366883e3d146101ef57806369fe0e2d14610230578063715018a61461025d5780637ef6afb0146102745780637f915bdc146102b557806383e7c4ed1461030c5780638da5cb5b146103435780639266d7e81461039a578063926f8a84146103db57806395fe715a1461041c578063a0a7299b14610447578063a97be8ba14610472578063adb7cc7b146104a9578063b3f00674146104d6578063bc063e1a1461052d578063bd5d5eec14610558578063d96a094a146105c5578063e3406a87146105e5578063ea12b14b14610612578063ec1d3f8e14610653578063efdcd97414610680578063f2fde38b146106c3578063f958e1dd14610706575b005b34801561016257600080fd5b50610197600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610747565b005b3480156101a557600080fd5b506101ae610835565b6040518082815260200191505060405180910390f35b3480156101d057600080fd5b506101d961083b565b6040518082815260200191505060405180910390f35b3480156101fb57600080fd5b5061021a60048036038101908080359060200190929190505050610845565b6040518082815260200191505060405180910390f35b34801561023c57600080fd5b5061025b600480360381019080803590602001909291905050506108f8565b005b34801561026957600080fd5b506102726109ac565b005b34801561028057600080fd5b5061029f60048036038101908080359060200190929190505050610a62565b6040518082815260200191505060405180910390f35b3480156102c157600080fd5b506102ca610afd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561031857600080fd5b506103416004803603810190808035906020019092919080359060200190929190505050610b23565b005b34801561034f57600080fd5b50610358610c98565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103a657600080fd5b506103c560048036038101908080359060200190929190505050610cc1565b6040518082815260200191505060405180910390f35b3480156103e757600080fd5b5061040660048036038101908080359060200190929190505050610d5c565b6040518082815260200191505060405180910390f35b34801561042857600080fd5b50610431610df7565b6040518082815260200191505060405180910390f35b34801561045357600080fd5b5061045c610dfd565b6040518082815260200191505060405180910390f35b34801561047e57600080fd5b506104a76004803603810190808035906020019092919080359060200190929190505050610e03565b005b3480156104b557600080fd5b506104d460048036038101908080359060200190929190505050611006565b005b3480156104e257600080fd5b506104eb61137e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561053957600080fd5b506105426113a4565b6040518082815260200191505060405180910390f35b34801561056457600080fd5b50610583600480360381019080803590602001909291905050506113aa565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6105e360048036038101908080359060200190929190505050611465565b005b3480156105f157600080fd5b5061061060048036038101908080359060200190929190505050611a22565b005b34801561061e57600080fd5b5061063d60048036038101908080359060200190929190505050611ad6565b6040518082815260200191505060405180910390f35b34801561065f57600080fd5b5061067e60048036038101908080359060200190929190505050611b71565b005b34801561068c57600080fd5b506106c1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c25565b005b3480156106cf57600080fd5b50610704600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d13565b005b34801561071257600080fd5b50610745600480360381019080803590602001909291908035906020019092919080359060200190929190505050611e94565b005b3373ffffffffffffffffffffffffffffffffffffffff16610766610c98565b73ffffffffffffffffffffffffffffffffffffffff161415156107f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60055481565b6000600654905090565b600081600654811015156108c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f696e76616c6964496e646578000000000000000000000000000000000000000081525060200191505060405180910390fd5b6008600084815260200190815260200160002060030160009054906101000a900460ff1660038111156108f057fe5b915050919050565b3373ffffffffffffffffffffffffffffffffffffffff16610917610c98565b73ffffffffffffffffffffffffffffffffffffffff161415156109a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b8060028190555050565b3373ffffffffffffffffffffffffffffffffffffffff166109cb610c98565b73ffffffffffffffffffffffffffffffffffffffff16141515610a56576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b610a606000612192565b565b60008160065481101515610ade576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f696e76616c6964496e646578000000000000000000000000000000000000000081525060200191505060405180910390fd5b6008600084815260200190815260200160002060020154915050919050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8160065481101515610b9d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f696e76616c6964496e646578000000000000000000000000000000000000000081525060200191505060405180910390fd5b823373ffffffffffffffffffffffffffffffffffffffff166008600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610c77576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600a8152602001807f6f6e6c7953656c6c65720000000000000000000000000000000000000000000081525060200191505060405180910390fd5b82600860008681526020019081526020016000206002018190555050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008160065481101515610d3d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f696e76616c6964496e646578000000000000000000000000000000000000000081525060200191505060405180910390fd5b6008600084815260200190815260200160002060050154915050919050565b60008160065481101515610dd8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f696e76616c6964496e646578000000000000000000000000000000000000000081525060200191505060405180910390fd5b6008600084815260200190815260200160002060040154915050919050565b60045481565b60025481565b8160065481101515610e7d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f696e76616c6964496e646578000000000000000000000000000000000000000081525060200191505060405180910390fd5b823373ffffffffffffffffffffffffffffffffffffffff166008600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610f57576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600a8152602001807f6f6e6c7953656c6c65720000000000000000000000000000000000000000000081525060200191505060405180910390fd5b82600860008681526020019081526020016000206004015411151515610fe5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f6f6e6c7946757475726554696d65416c6c6f776564000000000000000000000081525060200191505060405180910390fd5b82600860008681526020019081526020016000206004018190555050505050565b803373ffffffffffffffffffffffffffffffffffffffff166008600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156110e0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600a8152602001807f6f6e6c7953656c6c65720000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600060038111156110ed57fe5b6008600084815260200190815260200160002060030160009054906101000a900460ff16600381111561111c57fe5b141515611191576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f6f6e6c795768656e50656e64696e67000000000000000000000000000000000081525060200191505060405180910390fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e303360086000878152602001908152602001600020600001546040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b1580156112a057600080fd5b505af11580156112b4573d6000803e3d6000fd5b505050506008600083815260200190815260200160002060040154421115156113145760026008600084815260200190815260200160002060030160006101000a81548160ff0219169083600381111561130a57fe5b021790555061134d565b60036008600084815260200190815260200160002060030160006101000a81548160ff0219169083600381111561134757fe5b02179055505b817f4ce0cce74da0075ba858af4ba21683aa8312d87418888b9831683af462b8e41c60405160405180910390a25050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61271081565b60008160065481101515611426576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f696e76616c6964496e646578000000000000000000000000000000000000000081525060200191505060405180910390fd5b6008600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b6000806002600154141515156114e3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b60026001819055508260065481101515611565576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f696e76616c6964496e646578000000000000000000000000000000000000000081525060200191505060405180910390fd5b600860008581526020019081526020016000206002015492506115a76127106115996002548661225690919063ffffffff16565b61232390919063ffffffff16565b91506115bc82846123b690919063ffffffff16565b3410151515611633576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f6e6f74456e6f75676846756e647300000000000000000000000000000000000081525060200191505060405180910390fd5b6000600381111561164057fe5b6008600086815260200190815260200160002060030160009054906101000a900460ff16600381111561166f57fe5b1415156116e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f6f72646572497346696c6c65644f7252656a656374656400000000000000000081525060200191505060405180910390fd5b60086000858152602001908152602001600020600401544211151515611772576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f6f7264657249734578706972656400000000000000000000000000000000000081525060200191505060405180910390fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e303360086000898152602001908152602001600020600001546040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801561188157600080fd5b505af1158015611895573d6000803e3d6000fd5b505050506008600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc60086000878152602001908152602001600020600201549081150290604051600060405180830381858888f1935050505015801561192b573d6000803e3d6000fd5b50600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015611994573d6000803e3d6000fd5b5081600860008681526020019081526020016000206005018190555060016008600086815260200190815260200160002060030160006101000a81548160ff021916908360038111156119e357fe5b0217905550837fcdf98e0235c72ad7ae8de32249da25cc98298c8f11710c55a3d58e9e7ac69f9460405160405180910390a25060018081905550505050565b3373ffffffffffffffffffffffffffffffffffffffff16611a41610c98565b73ffffffffffffffffffffffffffffffffffffffff16141515611acc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b8060058190555050565b60008160065481101515611b52576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f696e76616c6964496e646578000000000000000000000000000000000000000081525060200191505060405180910390fd5b6008600084815260200190815260200160002060000154915050919050565b3373ffffffffffffffffffffffffffffffffffffffff16611b90610c98565b73ffffffffffffffffffffffffffffffffffffffff16141515611c1b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b8060048190555050565b3373ffffffffffffffffffffffffffffffffffffffff16611c44610c98565b73ffffffffffffffffffffffffffffffffffffffff16141515611ccf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b3373ffffffffffffffffffffffffffffffffffffffff16611d32610c98565b73ffffffffffffffffffffffffffffffffffffffff16141515611dbd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611e88576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526020017f646472657373000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b611e9181612192565b50565b806004548110158015611ea957506005548111155b1515611f1d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f696e76616c696445787069726174696f6e4475726174696f6e0000000000000081525060200191505060405180910390fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e3330876040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801561201657600080fd5b505af115801561202a573d6000803e3d6000fd5b5050505060c0604051908101604052808581526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018481526020016000600381111561206f57fe5b815260200161208784426123b690919063ffffffff16565b815260200160008152506008600060065481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015560608201518160030160006101000a81548160ff0219169083600381111561212557fe5b02179055506080820151816004015560a082015181600501559050506006547f7e82078c35b6665b9d320ebeaa6c266960fad5b802c5558cf7df60c4769af95b60405160405180910390a261218660016006546123b690919063ffffffff16565b60068190555050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080600084141561226b576000915061231c565b828402905082848281151561227c57fe5b04141515612318576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f81526020017f770000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8091505b5092915050565b60008060008311151561239e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060200191505060405180910390fd5b82848115156123a957fe5b0490508091505092915050565b6000808284019050838110151515612436576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b80915050929150505600a165627a7a723058208960d817b9dc95018e41b48d6eb394d6dbea7097dfc8f36e08af16cb3f94f18b0029",
  "deployedBytecode": "0x608060405260043610610154576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630fea6f7f146101565780635059702114610199578063523c096f146101c457806366883e3d146101ef57806369fe0e2d14610230578063715018a61461025d5780637ef6afb0146102745780637f915bdc146102b557806383e7c4ed1461030c5780638da5cb5b146103435780639266d7e81461039a578063926f8a84146103db57806395fe715a1461041c578063a0a7299b14610447578063a97be8ba14610472578063adb7cc7b146104a9578063b3f00674146104d6578063bc063e1a1461052d578063bd5d5eec14610558578063d96a094a146105c5578063e3406a87146105e5578063ea12b14b14610612578063ec1d3f8e14610653578063efdcd97414610680578063f2fde38b146106c3578063f958e1dd14610706575b005b34801561016257600080fd5b50610197600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610747565b005b3480156101a557600080fd5b506101ae610835565b6040518082815260200191505060405180910390f35b3480156101d057600080fd5b506101d961083b565b6040518082815260200191505060405180910390f35b3480156101fb57600080fd5b5061021a60048036038101908080359060200190929190505050610845565b6040518082815260200191505060405180910390f35b34801561023c57600080fd5b5061025b600480360381019080803590602001909291905050506108f8565b005b34801561026957600080fd5b506102726109ac565b005b34801561028057600080fd5b5061029f60048036038101908080359060200190929190505050610a62565b6040518082815260200191505060405180910390f35b3480156102c157600080fd5b506102ca610afd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561031857600080fd5b506103416004803603810190808035906020019092919080359060200190929190505050610b23565b005b34801561034f57600080fd5b50610358610c98565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103a657600080fd5b506103c560048036038101908080359060200190929190505050610cc1565b6040518082815260200191505060405180910390f35b3480156103e757600080fd5b5061040660048036038101908080359060200190929190505050610d5c565b6040518082815260200191505060405180910390f35b34801561042857600080fd5b50610431610df7565b6040518082815260200191505060405180910390f35b34801561045357600080fd5b5061045c610dfd565b6040518082815260200191505060405180910390f35b34801561047e57600080fd5b506104a76004803603810190808035906020019092919080359060200190929190505050610e03565b005b3480156104b557600080fd5b506104d460048036038101908080359060200190929190505050611006565b005b3480156104e257600080fd5b506104eb61137e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561053957600080fd5b506105426113a4565b6040518082815260200191505060405180910390f35b34801561056457600080fd5b50610583600480360381019080803590602001909291905050506113aa565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6105e360048036038101908080359060200190929190505050611465565b005b3480156105f157600080fd5b5061061060048036038101908080359060200190929190505050611a22565b005b34801561061e57600080fd5b5061063d60048036038101908080359060200190929190505050611ad6565b6040518082815260200191505060405180910390f35b34801561065f57600080fd5b5061067e60048036038101908080359060200190929190505050611b71565b005b34801561068c57600080fd5b506106c1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c25565b005b3480156106cf57600080fd5b50610704600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d13565b005b34801561071257600080fd5b50610745600480360381019080803590602001909291908035906020019092919080359060200190929190505050611e94565b005b3373ffffffffffffffffffffffffffffffffffffffff16610766610c98565b73ffffffffffffffffffffffffffffffffffffffff161415156107f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60055481565b6000600654905090565b600081600654811015156108c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f696e76616c6964496e646578000000000000000000000000000000000000000081525060200191505060405180910390fd5b6008600084815260200190815260200160002060030160009054906101000a900460ff1660038111156108f057fe5b915050919050565b3373ffffffffffffffffffffffffffffffffffffffff16610917610c98565b73ffffffffffffffffffffffffffffffffffffffff161415156109a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b8060028190555050565b3373ffffffffffffffffffffffffffffffffffffffff166109cb610c98565b73ffffffffffffffffffffffffffffffffffffffff16141515610a56576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b610a606000612192565b565b60008160065481101515610ade576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f696e76616c6964496e646578000000000000000000000000000000000000000081525060200191505060405180910390fd5b6008600084815260200190815260200160002060020154915050919050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8160065481101515610b9d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f696e76616c6964496e646578000000000000000000000000000000000000000081525060200191505060405180910390fd5b823373ffffffffffffffffffffffffffffffffffffffff166008600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610c77576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600a8152602001807f6f6e6c7953656c6c65720000000000000000000000000000000000000000000081525060200191505060405180910390fd5b82600860008681526020019081526020016000206002018190555050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008160065481101515610d3d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f696e76616c6964496e646578000000000000000000000000000000000000000081525060200191505060405180910390fd5b6008600084815260200190815260200160002060050154915050919050565b60008160065481101515610dd8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f696e76616c6964496e646578000000000000000000000000000000000000000081525060200191505060405180910390fd5b6008600084815260200190815260200160002060040154915050919050565b60045481565b60025481565b8160065481101515610e7d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f696e76616c6964496e646578000000000000000000000000000000000000000081525060200191505060405180910390fd5b823373ffffffffffffffffffffffffffffffffffffffff166008600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610f57576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600a8152602001807f6f6e6c7953656c6c65720000000000000000000000000000000000000000000081525060200191505060405180910390fd5b82600860008681526020019081526020016000206004015411151515610fe5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f6f6e6c7946757475726554696d65416c6c6f776564000000000000000000000081525060200191505060405180910390fd5b82600860008681526020019081526020016000206004018190555050505050565b803373ffffffffffffffffffffffffffffffffffffffff166008600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156110e0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600a8152602001807f6f6e6c7953656c6c65720000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600060038111156110ed57fe5b6008600084815260200190815260200160002060030160009054906101000a900460ff16600381111561111c57fe5b141515611191576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f6f6e6c795768656e50656e64696e67000000000000000000000000000000000081525060200191505060405180910390fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e303360086000878152602001908152602001600020600001546040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b1580156112a057600080fd5b505af11580156112b4573d6000803e3d6000fd5b505050506008600083815260200190815260200160002060040154421115156113145760026008600084815260200190815260200160002060030160006101000a81548160ff0219169083600381111561130a57fe5b021790555061134d565b60036008600084815260200190815260200160002060030160006101000a81548160ff0219169083600381111561134757fe5b02179055505b817f4ce0cce74da0075ba858af4ba21683aa8312d87418888b9831683af462b8e41c60405160405180910390a25050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61271081565b60008160065481101515611426576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f696e76616c6964496e646578000000000000000000000000000000000000000081525060200191505060405180910390fd5b6008600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b6000806002600154141515156114e3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b60026001819055508260065481101515611565576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f696e76616c6964496e646578000000000000000000000000000000000000000081525060200191505060405180910390fd5b600860008581526020019081526020016000206002015492506115a76127106115996002548661225690919063ffffffff16565b61232390919063ffffffff16565b91506115bc82846123b690919063ffffffff16565b3410151515611633576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f6e6f74456e6f75676846756e647300000000000000000000000000000000000081525060200191505060405180910390fd5b6000600381111561164057fe5b6008600086815260200190815260200160002060030160009054906101000a900460ff16600381111561166f57fe5b1415156116e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f6f72646572497346696c6c65644f7252656a656374656400000000000000000081525060200191505060405180910390fd5b60086000858152602001908152602001600020600401544211151515611772576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f6f7264657249734578706972656400000000000000000000000000000000000081525060200191505060405180910390fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e303360086000898152602001908152602001600020600001546040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801561188157600080fd5b505af1158015611895573d6000803e3d6000fd5b505050506008600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc60086000878152602001908152602001600020600201549081150290604051600060405180830381858888f1935050505015801561192b573d6000803e3d6000fd5b50600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015611994573d6000803e3d6000fd5b5081600860008681526020019081526020016000206005018190555060016008600086815260200190815260200160002060030160006101000a81548160ff021916908360038111156119e357fe5b0217905550837fcdf98e0235c72ad7ae8de32249da25cc98298c8f11710c55a3d58e9e7ac69f9460405160405180910390a25060018081905550505050565b3373ffffffffffffffffffffffffffffffffffffffff16611a41610c98565b73ffffffffffffffffffffffffffffffffffffffff16141515611acc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b8060058190555050565b60008160065481101515611b52576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f696e76616c6964496e646578000000000000000000000000000000000000000081525060200191505060405180910390fd5b6008600084815260200190815260200160002060000154915050919050565b3373ffffffffffffffffffffffffffffffffffffffff16611b90610c98565b73ffffffffffffffffffffffffffffffffffffffff16141515611c1b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b8060048190555050565b3373ffffffffffffffffffffffffffffffffffffffff16611c44610c98565b73ffffffffffffffffffffffffffffffffffffffff16141515611ccf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b3373ffffffffffffffffffffffffffffffffffffffff16611d32610c98565b73ffffffffffffffffffffffffffffffffffffffff16141515611dbd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611e88576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526020017f646472657373000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b611e9181612192565b50565b806004548110158015611ea957506005548111155b1515611f1d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f696e76616c696445787069726174696f6e4475726174696f6e0000000000000081525060200191505060405180910390fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e3330876040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801561201657600080fd5b505af115801561202a573d6000803e3d6000fd5b5050505060c0604051908101604052808581526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018481526020016000600381111561206f57fe5b815260200161208784426123b690919063ffffffff16565b815260200160008152506008600060065481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015560608201518160030160006101000a81548160ff0219169083600381111561212557fe5b02179055506080820151816004015560a082015181600501559050506006547f7e82078c35b6665b9d320ebeaa6c266960fad5b802c5558cf7df60c4769af95b60405160405180910390a261218660016006546123b690919063ffffffff16565b60068190555050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080600084141561226b576000915061231c565b828402905082848281151561227c57fe5b04141515612318576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f81526020017f770000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8091505b5092915050565b60008060008311151561239e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060200191505060405180910390fd5b82848115156123a957fe5b0490508091505092915050565b6000808284019050838110151515612436576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b80915050929150505600a165627a7a723058208960d817b9dc95018e41b48d6eb394d6dbea7097dfc8f36e08af16cb3f94f18b0029",
  "devdoc": {
    "author": "Integral Team",
    "methods": {
      "acceptTokenToSell(uint256,uint256,uint256)": {
        "params": {
          "_expirationDuration": "The duration of the sell order, and when it passed the sell order could not be filled without restarting of the sell order.",
          "_nftToSell": "The token ID to sell through sell order",
          "_price": "The price of the sell order"
        }
      },
      "buy(uint256)": {
        "params": {
          "_at": "The seller order index"
        }
      },
      "getBackFromSale(uint256)": {
        "params": {
          "_at": "The index of the sell order"
        }
      },
      "getSellOrderExpirationTime(uint256)": {
        "params": {
          "_at": "The index of the sell order"
        },
        "return": "Expiration timestamp in future"
      },
      "getSellOrderFeesPaid(uint256)": {
        "params": {
          "_at": "The index of the sell order"
        },
        "return": "Amount fees to pay"
      },
      "getSellOrderPrice(uint256)": {
        "params": {
          "_at": "The index of the sell order"
        },
        "return": "Price in ETH"
      },
      "getSellOrderSeller(uint256)": {
        "params": {
          "_at": "The index of the sell order"
        },
        "return": "The seller address of the sell order"
      },
      "getSellOrderStatus(uint256)": {
        "params": {
          "_at": "The index of the auction"
        },
        "return": "Status enumeration member as uint256"
      },
      "getSellOrderTokenId(uint256)": {
        "params": {
          "_at": "The index of the sell order"
        },
        "return": "The ID of the selling token"
      },
      "getSellOrdersAmount()": {
        "return": "Amount of the sell orders"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setExpirationTimeFor(uint256,uint256)": {
        "params": {
          "_at": "The seller order index",
          "_expirationTime": "The new expiration time for the sell order"
        }
      },
      "setFee(uint256)": {
        "params": {
          "_fee": "The new amount of fee in BPS"
        }
      },
      "setFeeReceiver(address)": {
        "params": {
          "_feeReceiver": "The new fee receiver address"
        }
      },
      "setMaxExpirationDuration(uint256)": {
        "params": {
          "_maxExpirationDuration": "The new maximum expiration duration in seconds"
        }
      },
      "setMinExpirationDuration(uint256)": {
        "params": {
          "_minExpirationDuration": "The new minimum expiration duration in seconds"
        }
      },
      "setPriceFor(uint256,uint256)": {
        "params": {
          "_at": "The seller order index",
          "_price": "The new price for the sell order"
        }
      },
      "setWorkingNFT(address)": {
        "params": {
          "_newNFTOnSale": "The new NFT token address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "A contract of the marketplace."
  },
  "userdoc": {
    "methods": {
      "acceptTokenToSell(uint256,uint256,uint256)": {
        "notice": "The function cancel the sell order and return the token in the sell order to the seller."
      },
      "buy(uint256)": {
        "notice": "The function allows anyone to fill sell order."
      },
      "getBackFromSale(uint256)": {
        "notice": "The function cancel the sell order and return the token in the sell order to the seller."
      },
      "getSellOrderExpirationTime(uint256)": {
        "notice": "The standard getter to return an expiration time of the given sell order"
      },
      "getSellOrderFeesPaid(uint256)": {
        "notice": "The standard getter to return a fees to pay amount of the given sell order"
      },
      "getSellOrderPrice(uint256)": {
        "notice": "The standard getter to return a price in ETH of the given sell order"
      },
      "getSellOrderSeller(uint256)": {
        "notice": "The standard getter to return a seller address of the given sell order"
      },
      "getSellOrderStatus(uint256)": {
        "notice": "The standard getter to return a status of the given sell order"
      },
      "getSellOrderTokenId(uint256)": {
        "notice": "The standard getter to return a token ID of the given sell order"
      },
      "getSellOrdersAmount()": {
        "notice": "The standard getter to return an amount of the sell orders"
      },
      "setExpirationTimeFor(uint256,uint256)": {
        "notice": "The function allows seller continue selling by expanding the expiration time of the sell order."
      },
      "setFee(uint256)": {
        "notice": "A standard setter for the fee BPS amount which available only for user"
      },
      "setFeeReceiver(address)": {
        "notice": "A standard setter for the fee receiver address which available only for user"
      },
      "setMaxExpirationDuration(uint256)": {
        "notice": "A standard setter for the maximum expiration duration which available only for user"
      },
      "setMinExpirationDuration(uint256)": {
        "notice": "A standard setter for the minimum expiration duration which available only for user"
      },
      "setPriceFor(uint256,uint256)": {
        "notice": "The function allows seller to change price."
      },
      "setWorkingNFT(address)": {
        "notice": "A standard setter for the working NFT which available only for user"
      }
    }
  }
}