{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newNFTOnSale",
          "type": "address"
        }
      ],
      "name": "setWorkingNFT",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_at",
          "type": "uint256"
        }
      ],
      "name": "getCurrentFeesToPayOfAuction",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_at",
          "type": "uint256"
        }
      ],
      "name": "getLastBuyerOfAuction",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_at",
          "type": "uint256"
        }
      ],
      "name": "take",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "maxExpirationDuration",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_at",
          "type": "uint256"
        },
        {
          "name": "_newPrice",
          "type": "uint256"
        }
      ],
      "name": "bid",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_at",
          "type": "uint256"
        }
      ],
      "name": "getStopTimeOfAuction",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_at",
          "type": "uint256"
        }
      ],
      "name": "getCurrentPriceOfAuction",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_at",
          "type": "uint256"
        }
      ],
      "name": "getTokenIdOfAuction",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "nftOnSale",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "minExpirationDuration",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_at",
          "type": "uint256"
        }
      ],
      "name": "cancelAuction",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_at",
          "type": "uint256"
        }
      ],
      "name": "getStatusOfAuction",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feeInBps",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_at",
          "type": "uint256"
        }
      ],
      "name": "getSellerOfAuction",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feeReceiver",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "MAX_FEE",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_nftToSell",
          "type": "uint256"
        },
        {
          "name": "_expirationDuration",
          "type": "uint256"
        },
        {
          "name": "_startPrice",
          "type": "uint256"
        }
      ],
      "name": "createAuction",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_maxExpirationDuration",
          "type": "uint256"
        }
      ],
      "name": "setMaxExpirationDuration",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_minExpirationDuration",
          "type": "uint256"
        }
      ],
      "name": "setMinExpirationDuration",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_feeReceiver",
          "type": "address"
        }
      ],
      "name": "setFeeReceiver",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getAuctionsAmount",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "_nftOnSale",
          "type": "address"
        },
        {
          "name": "_feeReceiver",
          "type": "address"
        },
        {
          "name": "_minExpirationDuration",
          "type": "uint256"
        },
        {
          "name": "_maxExpirationDuration",
          "type": "uint256"
        },
        {
          "name": "_feeInBps",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_at",
          "type": "uint256"
        }
      ],
      "name": "AuctionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_at",
          "type": "uint256"
        }
      ],
      "name": "AuctionRejected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_at",
          "type": "uint256"
        }
      ],
      "name": "AuctionFilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_at",
          "type": "uint256"
        }
      ],
      "name": "AuctionBid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    }
  ],
  "transactionHash": "0xd0bbf3fb25eb2ccd9947b1851e85e1f16421b39adcdb708225f59feb67c79a3f",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "2324997",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000040200000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000100000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000002000000000000000000020000000000000000000000000000000000000000000000000400000000000000000",
    "blockHash": "0xb861f2c2655f396e41d7445bcbf5206f752c5cd596eb54582adfbc40f4f1f5d2",
    "transactionHash": "0xd0bbf3fb25eb2ccd9947b1851e85e1f16421b39adcdb708225f59feb67c79a3f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3,
        "transactionHash": "0xd0bbf3fb25eb2ccd9947b1851e85e1f16421b39adcdb708225f59feb67c79a3f",
        "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb861f2c2655f396e41d7445bcbf5206f752c5cd596eb54582adfbc40f4f1f5d2"
      }
    ],
    "blockNumber": 3,
    "cumulativeGasUsed": "2324997",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "86400",
    "864000",
    9500
  ],
  "solcInputHash": "94a9936bcbef1aa0c6c8b2970cfe424e",
  "metadata": "{\"compiler\":{\"version\":\"0.4.26+commit.4563c3fc\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"_newNFTOnSale\",\"type\":\"address\"}],\"name\":\"setWorkingNFT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_at\",\"type\":\"uint256\"}],\"name\":\"getCurrentFeesToPayOfAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_at\",\"type\":\"uint256\"}],\"name\":\"getLastBuyerOfAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_at\",\"type\":\"uint256\"}],\"name\":\"take\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxExpirationDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_at\",\"type\":\"uint256\"},{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_at\",\"type\":\"uint256\"}],\"name\":\"getStopTimeOfAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_at\",\"type\":\"uint256\"}],\"name\":\"getCurrentPriceOfAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_at\",\"type\":\"uint256\"}],\"name\":\"getTokenIdOfAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nftOnSale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minExpirationDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_at\",\"type\":\"uint256\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_at\",\"type\":\"uint256\"}],\"name\":\"getStatusOfAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeInBps\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_at\",\"type\":\"uint256\"}],\"name\":\"getSellerOfAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nftToSell\",\"type\":\"uint256\"},{\"name\":\"_expirationDuration\",\"type\":\"uint256\"},{\"name\":\"_startPrice\",\"type\":\"uint256\"}],\"name\":\"createAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxExpirationDuration\",\"type\":\"uint256\"}],\"name\":\"setMaxExpirationDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minExpirationDuration\",\"type\":\"uint256\"}],\"name\":\"setMinExpirationDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceiver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAuctionsAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_nftOnSale\",\"type\":\"address\"},{\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"name\":\"_minExpirationDuration\",\"type\":\"uint256\"},{\"name\":\"_maxExpirationDuration\",\"type\":\"uint256\"},{\"name\":\"_feeInBps\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_at\",\"type\":\"uint256\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_at\",\"type\":\"uint256\"}],\"name\":\"AuctionRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_at\",\"type\":\"uint256\"}],\"name\":\"AuctionFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_at\",\"type\":\"uint256\"}],\"name\":\"AuctionBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}],\"devdoc\":{\"author\":\"Integral Team\",\"methods\":{\"bid(uint256,uint256)\":{\"params\":{\"_at\":\"The index of the auction\",\"_newPrice\":\"The price which the buyer want to spend at the auctioning item. Must be greater than current price in the auction.\"}},\"cancelAuction(uint256)\":{\"params\":{\"_at\":\"The index of the auction\"}},\"createAuction(uint256,uint256,uint256)\":{\"params\":{\"_expirationDuration\":\"Duration of the auction in valid bounds (between min and max value of the duration)\",\"_nftToSell\":\"The selling token ID\",\"_startPrice\":\"Starting price of the selling token in ETH (wei)\"}},\"getAuctionsAmount()\":{\"return\":\"Amount of the auctions\"},\"getCurrentFeesToPayOfAuction(uint256)\":{\"params\":{\"_at\":\"The index of the auction\"},\"return\":\"Current amount of fees to pay\"},\"getCurrentPriceOfAuction(uint256)\":{\"params\":{\"_at\":\"The index of the auction\"},\"return\":\"Current price of the auctioning token\"},\"getLastBuyerOfAuction(uint256)\":{\"params\":{\"_at\":\"The index of the auction\"},\"return\":\"Seller address\"},\"getSellerOfAuction(uint256)\":{\"params\":{\"_at\":\"The index of the auction\"},\"return\":\"Seller address\"},\"getStatusOfAuction(uint256)\":{\"params\":{\"_at\":\"The index of the auction\"},\"return\":\"Status enumeration member as uint256\"},\"getStopTimeOfAuction(uint256)\":{\"params\":{\"_at\":\"The index of the auction\"},\"return\":\"Stop time in UNIX timestamp\"},\"getTokenIdOfAuction(uint256)\":{\"params\":{\"_at\":\"The index of the auction\"},\"return\":\"The ID of the auctions selling token\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setFee(uint256)\":{\"params\":{\"_fee\":\"The new amount of fee in BPS\"}},\"setFeeReceiver(address)\":{\"params\":{\"_feeReceiver\":\"The new fee receiver address\"}},\"setMaxExpirationDuration(uint256)\":{\"params\":{\"_maxExpirationDuration\":\"The new maximum expiration duration in seconds\"}},\"setMinExpirationDuration(uint256)\":{\"params\":{\"_minExpirationDuration\":\"The new minimum expiration duration in seconds\"}},\"setWorkingNFT(address)\":{\"params\":{\"_newNFTOnSale\":\"The new NFT token address\"}},\"take(uint256)\":{\"params\":{\"_at\":\"The index of the auction\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"A contract for auctioning the NFTs.\"},\"userdoc\":{\"methods\":{\"bid(uint256,uint256)\":{\"notice\":\"Allows anyone to bid in the ceriatin auction if they have needed balance.\"},\"cancelAuction(uint256)\":{\"notice\":\"This function can be called only by the seller of the auctioning item and provides the functional to reject or expire the auction if certain amount of time passed. Emits the AuctionRejected event\"},\"createAuction(uint256,uint256,uint256)\":{\"notice\":\"The function which could create a auction\"},\"getAuctionsAmount()\":{\"notice\":\"The standard getter to return an amount of the auctions\"},\"getCurrentFeesToPayOfAuction(uint256)\":{\"notice\":\"The standard getter to return a current amount of fees to pay of the given auction\"},\"getCurrentPriceOfAuction(uint256)\":{\"notice\":\"The standard getter to return a current price of the given auction\"},\"getLastBuyerOfAuction(uint256)\":{\"notice\":\"The standard getter to return a seller of the given auction\"},\"getSellerOfAuction(uint256)\":{\"notice\":\"The standard getter to return a seller of the given auction\"},\"getStatusOfAuction(uint256)\":{\"notice\":\"The standard getter to return a status of the given auction\"},\"getStopTimeOfAuction(uint256)\":{\"notice\":\"The standard getter to return a stop time of the given auction\"},\"getTokenIdOfAuction(uint256)\":{\"notice\":\"The standard getter to return a token ID of the given auctions selling token\"},\"setFee(uint256)\":{\"notice\":\"A standard setter for the fee BPS amount which available only for user\"},\"setFeeReceiver(address)\":{\"notice\":\"A standard setter for the fee receiver address which available only for user\"},\"setMaxExpirationDuration(uint256)\":{\"notice\":\"A standard setter for the maximum expiration duration which available only for user\"},\"setMinExpirationDuration(uint256)\":{\"notice\":\"A standard setter for the minimum expiration duration which available only for user\"},\"setWorkingNFT(address)\":{\"notice\":\"A standard setter for the working NFT which available only for user\"},\"take(uint256)\":{\"notice\":\"Allows the address who won the auction pay and take bought NFT item.\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/NFTAuction.sol\":\"NFTAuction\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Management.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.4.0;\\n\\nimport './Ownable.sol';\\nimport './ReentrancyGuard.sol';\\nimport './interfaces/IERC721.sol';\\n\\n/// @title A contract for holding management functions and modifiers.\\n/// @author Integral Team\\ncontract Management is Ownable, ReentrancyGuard {\\n\\n    // This enumeration is describing different statuses of the different orders\\n    enum Status {\\n        PENDING,\\n        FILLED,\\n        REJECTED,\\n        EXPIRED\\n    }\\n\\n    /// @notice This is max of the basis points\\n    uint256 public constant MAX_FEE = 10000;\\n\\n    /// @notice This is a fee amount in basis points using in sell orders and auctions\\n    uint256 public feeInBps;\\n\\n    /// @notice This is the address which will receive any kind of fees (either in marketplace or auction)\\n    address public feeReceiver;\\n\\n    /// @notice This is the lower border of the expiration duration that used in orders of marketplace and in auctions\\n    uint256 public minExpirationDuration;\\n\\n    /// @notice This is the upper border of the expiration duration that used in orders of marketplace and in auctions\\n    uint256 public maxExpirationDuration;\\n\\n    /// @notice This is the amount of either sell orders or auctions\\n    uint256 internal _length;\\n\\n    /// @notice This is a NFT which could be sold in marketplace or auction\\n    IERC721 public nftOnSale;\\n\\n    /// @notice This is a standard constructor with one argument\\n    /// @param _nftOnSale The NFT which could be sold in marketplace or auction\\n    constructor(\\n        address _nftOnSale,\\n        address _feeReceiver,\\n        uint256 _minExpirationDuration,\\n        uint256 _maxExpirationDuration,\\n        uint256 _feeInBps\\n    ) public {\\n        nftOnSale = IERC721(_nftOnSale);\\n        feeReceiver = _feeReceiver;\\n        minExpirationDuration = _minExpirationDuration;\\n        maxExpirationDuration = _maxExpirationDuration;\\n        feeInBps = _feeInBps;\\n    }\\n\\n    /// @notice This custom modifier is to validate index of either sell order or auction\\n    /// @param _at An index in the mapping of auctions or sell orders\\n    modifier validIndex(uint256 _at) {\\n        require(_at < _length, \\\"invalidIndex\\\");\\n        _;\\n    }\\n\\n    /// @notice This custom modifier is to validate expiration duration of either sell order or auction\\n    /// @param _expirationDuration The duration which about to be used in auction or sell order\\n    modifier validExpirationDuration(uint256 _expirationDuration) {\\n        require(_expirationDuration >= minExpirationDuration && _expirationDuration <= maxExpirationDuration, \\\"invalidExpirationDuration\\\");\\n        _;\\n    }\\n\\n    /// @notice A standard setter for the working NFT which available only for user\\n    /// @param _newNFTOnSale The new NFT token address\\n    function setWorkingNFT(address _newNFTOnSale) external onlyOwner {\\n        nftOnSale = IERC721(_newNFTOnSale);\\n    }\\n\\n    /// @notice A standard setter for the fee receiver address which available only for user\\n    /// @param _feeReceiver The new fee receiver address\\n    function setFeeReceiver(address _feeReceiver) external onlyOwner {\\n        feeReceiver = _feeReceiver;\\n    }\\n\\n    /// @notice A standard setter for the fee BPS amount which available only for user\\n    /// @param _fee The new amount of fee in BPS\\n    function setFee(uint256 _fee) external onlyOwner {\\n        feeInBps = _fee;\\n    }\\n\\n    /// @notice A standard setter for the minimum expiration duration which available only for user\\n    /// @param _minExpirationDuration The new minimum expiration duration in seconds\\n    function setMinExpirationDuration(uint256 _minExpirationDuration) external onlyOwner {\\n        minExpirationDuration = _minExpirationDuration;\\n    }\\n\\n    /// @notice A standard setter for the maximum expiration duration which available only for user\\n    /// @param _maxExpirationDuration The new maximum expiration duration in seconds\\n    function setMaxExpirationDuration(uint256 _maxExpirationDuration) external onlyOwner {\\n        maxExpirationDuration = _maxExpirationDuration;\\n    }\\n\\n    /// @notice Default fallback function which allows the contract to accept ether\\n    function() external payable {}\\n}\\n\",\"keccak256\":\"0xd3be8e8fbf3b928df330257e54411213526985dfd603b2a85e05d8d7b2c4e261\"},\"contracts/NFTAuction.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.4.0;\\n\\nimport './interfaces/IERC721.sol';\\nimport './Management.sol';\\nimport './SafeMath.sol';\\n\\n/// @title A contract for auctioning the NFTs.\\n/// @author Integral Team\\ncontract NFTAuction is Management {\\n    using SafeMath for uint256;\\n\\n    // This struct is describing the auction information\\n    struct Auction {\\n        uint256 tokenId; // id of the auctioning token\\n        address seller; // id of the seller who is selling the auctioning token\\n        address lastBuyer; // the last of the buyers who bid last and faster than anyone\\n        uint256 stopTime; // the time after which the auction is considered closed and \\\"take\\\" function is unblocked\\n        uint256 currentPrice; // the current price of the auctioning timer, it do rise as auction proceed\\n        uint256 feesToPay; // the fees amount which must be payed above the current price\\n        Status status; // the status of the auction\\n    }\\n\\n    /// @notice This event is fired when seller create an auction\\n    event AuctionCreated(uint256 indexed _at);\\n\\n    /// @notice This event is fired when seller reject the auction\\n    event AuctionRejected(uint256 indexed _at);\\n\\n    /// @notice This event is fired when last buyer buy the auctioning item after auction is done\\n    event AuctionFilled(uint256 indexed _at);\\n\\n    /// @notice This event is fired when some buyer bids on the auction\\n    event AuctionBid(uint256 indexed _at);\\n\\n    /// @notice This mapping contains the auctions history\\n    mapping(uint256 => Auction) internal _auctions;\\n\\n    /// @notice This custom modifier is to validate if msg.sender is the seller of the auction\\n    /// @param _at The index of the given auction in which seller is checked\\n    modifier onlySellerOf(uint256 _at) {\\n        require(_auctions[_at].seller == msg.sender, \\\"onlySeller\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _nftOnSale,\\n        address _feeReceiver,\\n        uint256 _minExpirationDuration,\\n        uint256 _maxExpirationDuration,\\n        uint256 _feeInBps\\n    )\\n        public\\n        Management(\\n          _nftOnSale,\\n          _feeReceiver,\\n          _minExpirationDuration,\\n          _maxExpirationDuration,\\n          _feeInBps\\n        )\\n    {}\\n\\n    /// @notice The standard getter to return an amount of the auctions\\n    /// @return Amount of the auctions\\n    function getAuctionsAmount() external view returns(uint256) {\\n        return _length;\\n    }\\n\\n    /// @notice The standard getter to return a token ID of the given auctions selling token\\n    /// @param _at The index of the auction\\n    /// @return The ID of the auctions selling token\\n    function getTokenIdOfAuction(uint256 _at) external view validIndex(_at) returns(uint256) {\\n        return _auctions[_at].tokenId;\\n    }\\n\\n    /// @notice The standard getter to return a seller of the given auction\\n    /// @param _at The index of the auction\\n    /// @return Seller address\\n    function getSellerOfAuction(uint256 _at) external view validIndex(_at) returns(address) {\\n        return _auctions[_at].seller;\\n    }\\n\\n    /// @notice The standard getter to return a seller of the given auction\\n    /// @param _at The index of the auction\\n    /// @return Seller address\\n    function getLastBuyerOfAuction(uint256 _at) external view validIndex(_at) returns(address) {\\n        return _auctions[_at].lastBuyer;\\n    }\\n\\n    /// @notice The standard getter to return a stop time of the given auction\\n    /// @param _at The index of the auction\\n    /// @return Stop time in UNIX timestamp\\n    function getStopTimeOfAuction(uint256 _at) external view validIndex(_at) returns(uint256) {\\n        return _auctions[_at].stopTime;\\n    }\\n\\n    /// @notice The standard getter to return a current price of the given auction\\n    /// @param _at The index of the auction\\n    /// @return Current price of the auctioning token\\n    function getCurrentPriceOfAuction(uint256 _at) external view validIndex(_at) returns(uint256) {\\n        return _auctions[_at].currentPrice;\\n    }\\n\\n    /// @notice The standard getter to return a current amount of fees to pay of the given auction\\n    /// @param _at The index of the auction\\n    /// @return Current amount of fees to pay\\n    function getCurrentFeesToPayOfAuction(uint256 _at) external view validIndex(_at) returns(uint256) {\\n        return _auctions[_at].feesToPay;\\n    }\\n\\n    /// @notice The standard getter to return a status of the given auction\\n    /// @param _at The index of the auction\\n    /// @return Status enumeration member as uint256\\n    function getStatusOfAuction(uint256 _at) external view validIndex(_at) returns(uint256) {\\n        return uint256(_auctions[_at].status);\\n    }\\n\\n    /// @notice The function which could create a auction\\n    /// @param _nftToSell The selling token ID\\n    /// @param _expirationDuration Duration of the auction in valid bounds (between min and max value of the duration)\\n    /// @param _startPrice Starting price of the selling token in ETH (wei)\\n    function createAuction(uint256 _nftToSell, uint256 _expirationDuration, uint256 _startPrice)\\n        external\\n        validExpirationDuration(_expirationDuration)\\n    {\\n        nftOnSale.safeTransferFrom(msg.sender, address(this), _nftToSell);\\n        _auctions[_length] = Auction({\\n            tokenId: _nftToSell,\\n            seller: msg.sender,\\n            lastBuyer: address(0),\\n            stopTime: block.timestamp.add(_expirationDuration),\\n            currentPrice: _startPrice,\\n            feesToPay: 0,\\n            status: Status.PENDING\\n        });\\n        emit AuctionCreated(_length);\\n        _length = _length.add(1);\\n    }\\n\\n    /// @notice This function can be called only by the seller of the auctioning item\\n    /// and provides the functional to reject or expire the auction if certain amount of time passed.\\n    /// Emits the AuctionRejected event\\n    /// @param _at The index of the auction\\n    function cancelAuction(uint256 _at)\\n        external\\n        validIndex(_at)\\n        onlySellerOf(_at)\\n    {\\n        require(_auctions[_at].status == Status.PENDING, \\\"auctionIsEitherFilledOrRejectedOrExpired\\\");\\n        nftOnSale.safeTransferFrom(address(this), msg.sender, _auctions[_at].tokenId);\\n        if (block.timestamp <= _auctions[_at].stopTime) {\\n          _auctions[_at].status = Status.REJECTED;\\n        } else {\\n          _auctions[_at].status = Status.EXPIRED;\\n        }\\n        emit AuctionRejected(_at);\\n    }\\n\\n    /// @notice Allows anyone to bid in the ceriatin auction if they have needed balance.\\n    /// @param _at The index of the auction\\n    /// @param _newPrice The price which the buyer want to spend at the auctioning item.\\n    /// Must be greater than current price in the auction.\\n    function bid(uint256 _at, uint256 _newPrice) external validIndex(_at) {\\n        require(msg.sender.balance >= _newPrice, \\\"notEnoughFundsToProveYourBid\\\");\\n        require(_auctions[_at].currentPrice < _newPrice, \\\"cannotBidOnLowerPrice\\\");\\n        require(block.timestamp <= _auctions[_at].stopTime, \\\"auctionIsStopped\\\");\\n        require(_auctions[_at].status == Status.PENDING, \\\"auctionMustBePending\\\");\\n        _auctions[_at].currentPrice = _newPrice;\\n        _auctions[_at].lastBuyer = msg.sender;\\n        _auctions[_at].feesToPay = _newPrice.mul(feeInBps).div(MAX_FEE);\\n        emit AuctionBid(_at);\\n    }\\n\\n    /// @notice Allows the address who won the auction pay and take bought NFT item.\\n    /// @param _at The index of the auction\\n    function take(uint256 _at) external payable nonReentrant {\\n        require(msg.value >= _auctions[_at].currentPrice.add(_auctions[_at].feesToPay), \\\"notEnoughFunds\\\");\\n        require(block.timestamp > _auctions[_at].stopTime, \\\"auctionIsStopped\\\");\\n        require(msg.sender == _auctions[_at].lastBuyer, \\\"senderMustBeBuyerWhoWon\\\");\\n        _auctions[_at].seller.transfer(_auctions[_at].currentPrice);\\n        feeReceiver.transfer(_auctions[_at].feesToPay);\\n        nftOnSale.safeTransferFrom(address(this), _auctions[_at].lastBuyer, _auctions[_at].tokenId);\\n        _auctions[_at].status = Status.FILLED;\\n        emit AuctionFilled(_at);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x3303ffa7618ba15d1b0acdfaae7ebfc0a62bf8f23092f34c51f0e94660ffc072\"},\"contracts/Ownable.sol\":{\"content\":\"pragma solidity ^0.4.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() public {\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x883d0826b958473f0f543f1a764343596746d04626bae9988fea5566c5177907\"},\"contracts/ReentrancyGuard.sol\":{\"content\":\"pragma solidity ^0.4.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() public {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0a96afec6b3d6c667cf2794719cbf1cd4edfa28ba367777920bd771eeed909e5\"},\"contracts/SafeMath.sol\":{\"content\":\"pragma solidity ^0.4.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe16d01c65ce05da9b2a2bce3cd1367279b16da665f7851d4a389c1b81620e00c\"},\"contracts/interfaces/IERC721.sol\":{\"content\":\"pragma solidity ^0.4.0;\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ncontract IERC721 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xb603565feb0b8cd5d656ad1be1b2454bcc466479af84ff13bfeee81d52c8a9e5\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Integral Team",
    "methods": {
      "bid(uint256,uint256)": {
        "params": {
          "_at": "The index of the auction",
          "_newPrice": "The price which the buyer want to spend at the auctioning item. Must be greater than current price in the auction."
        }
      },
      "cancelAuction(uint256)": {
        "params": {
          "_at": "The index of the auction"
        }
      },
      "createAuction(uint256,uint256,uint256)": {
        "params": {
          "_expirationDuration": "Duration of the auction in valid bounds (between min and max value of the duration)",
          "_nftToSell": "The selling token ID",
          "_startPrice": "Starting price of the selling token in ETH (wei)"
        }
      },
      "getAuctionsAmount()": {
        "return": "Amount of the auctions"
      },
      "getCurrentFeesToPayOfAuction(uint256)": {
        "params": {
          "_at": "The index of the auction"
        },
        "return": "Current amount of fees to pay"
      },
      "getCurrentPriceOfAuction(uint256)": {
        "params": {
          "_at": "The index of the auction"
        },
        "return": "Current price of the auctioning token"
      },
      "getLastBuyerOfAuction(uint256)": {
        "params": {
          "_at": "The index of the auction"
        },
        "return": "Seller address"
      },
      "getSellerOfAuction(uint256)": {
        "params": {
          "_at": "The index of the auction"
        },
        "return": "Seller address"
      },
      "getStatusOfAuction(uint256)": {
        "params": {
          "_at": "The index of the auction"
        },
        "return": "Status enumeration member as uint256"
      },
      "getStopTimeOfAuction(uint256)": {
        "params": {
          "_at": "The index of the auction"
        },
        "return": "Stop time in UNIX timestamp"
      },
      "getTokenIdOfAuction(uint256)": {
        "params": {
          "_at": "The index of the auction"
        },
        "return": "The ID of the auctions selling token"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setFee(uint256)": {
        "params": {
          "_fee": "The new amount of fee in BPS"
        }
      },
      "setFeeReceiver(address)": {
        "params": {
          "_feeReceiver": "The new fee receiver address"
        }
      },
      "setMaxExpirationDuration(uint256)": {
        "params": {
          "_maxExpirationDuration": "The new maximum expiration duration in seconds"
        }
      },
      "setMinExpirationDuration(uint256)": {
        "params": {
          "_minExpirationDuration": "The new minimum expiration duration in seconds"
        }
      },
      "setWorkingNFT(address)": {
        "params": {
          "_newNFTOnSale": "The new NFT token address"
        }
      },
      "take(uint256)": {
        "params": {
          "_at": "The index of the auction"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "A contract for auctioning the NFTs."
  },
  "userdoc": {
    "methods": {
      "bid(uint256,uint256)": {
        "notice": "Allows anyone to bid in the ceriatin auction if they have needed balance."
      },
      "cancelAuction(uint256)": {
        "notice": "This function can be called only by the seller of the auctioning item and provides the functional to reject or expire the auction if certain amount of time passed. Emits the AuctionRejected event"
      },
      "createAuction(uint256,uint256,uint256)": {
        "notice": "The function which could create a auction"
      },
      "getAuctionsAmount()": {
        "notice": "The standard getter to return an amount of the auctions"
      },
      "getCurrentFeesToPayOfAuction(uint256)": {
        "notice": "The standard getter to return a current amount of fees to pay of the given auction"
      },
      "getCurrentPriceOfAuction(uint256)": {
        "notice": "The standard getter to return a current price of the given auction"
      },
      "getLastBuyerOfAuction(uint256)": {
        "notice": "The standard getter to return a seller of the given auction"
      },
      "getSellerOfAuction(uint256)": {
        "notice": "The standard getter to return a seller of the given auction"
      },
      "getStatusOfAuction(uint256)": {
        "notice": "The standard getter to return a status of the given auction"
      },
      "getStopTimeOfAuction(uint256)": {
        "notice": "The standard getter to return a stop time of the given auction"
      },
      "getTokenIdOfAuction(uint256)": {
        "notice": "The standard getter to return a token ID of the given auctions selling token"
      },
      "setFee(uint256)": {
        "notice": "A standard setter for the fee BPS amount which available only for user"
      },
      "setFeeReceiver(address)": {
        "notice": "A standard setter for the fee receiver address which available only for user"
      },
      "setMaxExpirationDuration(uint256)": {
        "notice": "A standard setter for the maximum expiration duration which available only for user"
      },
      "setMinExpirationDuration(uint256)": {
        "notice": "A standard setter for the minimum expiration duration which available only for user"
      },
      "setWorkingNFT(address)": {
        "notice": "A standard setter for the working NFT which available only for user"
      },
      "take(uint256)": {
        "notice": "Allows the address who won the auction pay and take bought NFT item."
      }
    }
  }
}